// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Access Token
// Client 가 Resource Server 에게 사용자 정보를 요청하기 위한 입장권 같은 것입니다.
// 입장권에는 유효기간이 있습니다. 각 provider 마다 다릅니다.
// 유효 기간이 지나면 더 이상 이 토큰을 사용 할 수 없습니다.

// Refresh Token
// 위 Access Token 이 유효기간이 만료 되면, 새로운 Access Token 을 발급 받기 위해 필요한 토큰입니다.
// 이 토큰에도 유효기간이 있습니다. 각 provider 마다 다릅니다. Access Token 보다는 유효기간이 훨씬 깁니다.

model Account {
    id                String   @id @default(cuid())
    provider          String
    type              String
    providerAccountId String
    access_token      String?  @db.VarChar(191)
    token_type        String?
    refresh_token     String?  @db.VarChar(191)
    expires_at        Int?
    scope             String?
    id_token          String?  @db.VarChar(191)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    session_state     String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    password      String?
    phone         String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}
